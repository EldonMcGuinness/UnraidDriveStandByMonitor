Menu="Main:4"
Title="Standby Averages"
Tag="logo-x16.png"
Markdown="false"
---
<?
#Pull some default data
libxml_use_internal_errors(true); # Suppress any warnings from xml errors.

$scriptName = "DriveStandbyMonitor";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$pluginRoot = "$docroot/plugins/$scriptName";
include_once( "./plugins/$scriptName/includes/page.php" );

$DSM = new DisksInfo( $disks );
$DB = new DSMDB( $DB_FILE );

# Temporary storage for $disk array that is being manipulated
$DRIVE_STATUS = array();

while ($data = $DB->getLiveDisks()){
    $DRIVE_STATUS[ $data["drive"] ]['live'] = $data["count"];
}

while ($data = $DB->getStandbyDisks()){
    $DRIVE_STATUS[ $data["drive"] ]['standby'] = $data["count"];
}

if( count($DRIVE_STATUS) !== 0 ) {

    # Calculate AVG
    foreach ( $DRIVE_STATUS as $key => $val){
        $live = isset( $val['live'] ) ? $val['live'] : 0;
        $standby = isset( $val['standby'] ) ? $val['standby'] : 0;

        $DRIVE_STATUS[$key]['name'] = $DSM->getDeviceName( $key );
        $DRIVE_STATUS[$key]['device'] = $DSM->getDevice( $key );
        $DRIVE_STATUS[$key]['type'] = $DSM->getDeviceType( $key );

        if ( empty($DRIVE_STATUS[$key]['device']) ) {
            unset($DRIVE_STATUS[$key]);
            continue;
        }

        if ($standby < 1) {
            $DRIVE_STATUS[$key]['avg'] = 0;
        }else{
            $DRIVE_STATUS[$key]['avg'] = round( ( 100 * ( $standby / ($live + $standby) ) ), 2 );
        }
    }

    # Sort the list
    DSMTools::diskSort($DRIVE_STATUS);

}

?>

<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">
<style type="text/css">

.show-standby .hidden {
    display:none;
}

.show-standby .fa-eye {
    display:none;
}

.show-standby.edit-standby .hidden {
    display:table-row;
}

.show-standby.edit-standby .fa-eye {
    display:inline;
    color:green;
}

.show-standby.edit-standby .hidden .fa-eye {
    color:grey;
}

.show-standby table tbody tr,
.show-standby table tbody tr:nth-child(even) {
    background-color:inherit;
}

</style>

<div class="show-standby">
    <table class="disk_status wide">
        <thead>
            <tr>
                <td title="">Device</td>
                <td title="">Identification</td>
                <td title="" style="text-align:center;">Standby</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </thead>
        <tbody>
        <?if( count($DRIVE_STATUS) === 0 ) {?>
            <tr>
                <td>
                    No data has been collected yet<br/>
                    Please wait up to 20 minutes for an update to occur.
                </td>
            </tr>
        <?} else {?>
        <? foreach ( $DRIVE_STATUS as $key => $val) : ?>
            <tr standby-drive="<?=$key?>" class="standby-drive <? echo ($_COOKIE["standby-drive-".$key] == 'true') ? "hidden" : ""; ?>">
                <td>
                    <span class="view"><i class="fa fa-eye"></i></span>
                    <span class="info"></span>
                    <?=$val['name']?>
                </td>
                <td>
                    <i class="icon-disk icon"></i>
                    <?=$key." - (".$val['device'].")"?>
                </td>
                <td style="text-align:center;">
                    <? print($val['avg'] . '%'); ?>
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        <? endforeach; ?>
        <?}?>
        </tbody>
    </table>
</div>

<script type="text/javascript">

function getTabTitleByName( name ){
    for ( let obj of document.querySelectorAll("div.tabs div.title > span.left") ){
        if (obj.innerText === "Standby Averages") return obj.parentNode;
    }
}

// TODO: Rewrite this to not need jquery
function addButton(Button, Name, autoHide = true, Append = true) {

    console.warn("Button Added "+Name);
    let Target = getTabTitleByName(Name);
    
    //Build the wrapper element
    let element = document.createElement("span");
    element.style.marginRight = "2px";
    element.style.marginTop = "1px";
    element.id = "event-" + new Date().getTime() * Math.floor(Math.random()*100000);
    element.classList.add("status");
    element.append(Button);

     //$("<span id='"+elementId+"' class='status'>"+Button+"</span>");


     console.warn(element.querySelectorAll("input[type='button']"));
    rc = true;
    if ( (element.querySelectorAll("input[type='button']")).length > 0) {
        element.addClass("vhshift");
        
        let input = element.querySelectorAll("input[type='button']")[0];
        
        input.style.paddingTop = "5px";
        input.style.paddingBottom = "5px";
        input.style.marginTop = "-3px";
        input.style.marginBottom = "0px";
    }

    if (Target.nodeName === "DIV") {
        element.classList.add("vhshift");
        if (Append) {
            Target.append(element);
        } else {
            Target.prepend(element);
        }
    } else if (Target.prop('nodeName') === "INPUT") {
        element.css("display","none");

        if (Append) {
            $('.tabs').append(element);
        } else {
            $('.tabs').prepend(element);
        }

        Target.bind({click:function() {
            $('#'+elementId).fadeIn('slow');}
        });

        if (Target.is(':checked') || (! autoHide)) {
            $('#'+elementId).fadeIn('slow');
        }

        $("input[name$=tabs]").each(function() {
            if (! $(this).is(Target) && autoHide ) {
                $(this).bind({click:function() {
                    $('#'+elementId).fadeOut('slow');}
                });
            }
        });
    } else {
            rc = false;
    }

    return rc;
}

document.addEventListener( 'DOMContentLoaded', () => {

    console.warn("DOMContentLoaded");

    addButton( (() => {
        let a_obj = document.createElement("a");
        a_obj.style.cursor = "pointer";
        a_obj.classList.add("tooltip");
        a_obj.title = "More Info";
        a_obj.href = "/Tools/DriveStandbyMonitor";


        let i_obj = document.createElement("i");
        i_obj.classList.add("fa");
        i_obj.classList.add("fa-info-circle");
        i_obj.classList.add("fa-switch");

        a_obj.append(i_obj);

        return a_obj;
        })(),
        'Standby Averages'
    );

    addButton( (() => {
        let a_obj = document.createElement("a");
        a_obj.style.cursor = "pointer";
        a_obj.classList.add("tooltip");
        a_obj.title = "Show Devices";
        // The next two lines are needed for alignment with switch elements
        a_obj.style.display = "block";
        a_obj.style.marginTop = "2px";
        a_obj.style.marginRight = "-6px";

        let i_obj = document.createElement("input");
        i_obj.type = "checkbox";
        i_obj.classList.add("standby-switch");

        a_obj.append(i_obj);

        return a_obj;
        })(),
        'Standby Averages'
    );

    addButton( (() => {
        let a_obj = document.createElement("a");
        a_obj.style.cursor = "pointer";
        a_obj.classList.add("tooltip");
        a_obj.title = "Edit Devices";
        // The next two lines are needed for alignment with switch elements
        a_obj.style.display = "block";
        a_obj.style.marginTop = "2px";
        a_obj.style.marginRight = "-6px";

        let i_obj = document.createElement("input");
        i_obj.type = "checkbox";
        i_obj.classList.add("standby-editor-switch");

        a_obj.append(i_obj);

        return a_obj;
        })(),
        'Standby Averages'
    );

    $('.standby-switch').switchButton(
        { 
            labels_placement: "left",
            on_label: "Show",
            off_label: "Show",
            checked: $.cookie('standby-switch') != 'false'
        }
    );

    $('.standby-editor-switch').switchButton(
        { 
            labels_placement: "left",
            on_label: "Edit",
            off_label: "Edit",
            checked: false
        }
    );

    $('.standby-switch').change( function () {
        $('.show-standby').slideToggle('slow');
        $.cookie('standby-switch', $('.standby-switch').is(':checked') ? 'true' : 'false', { expires: 3650, path:'/' });
    });

    $('.standby-editor-switch').change( function () {
        $(".show-standby").toggleClass("edit-standby")
    });


    $('.standby-drive').on("click", function () {

        if ( $(".show-standby").hasClass("edit-standby") ){
            let drive = $(this).attr("standby-drive");
            let hidden = $(this).hasClass("hidden");

            $.cookie('standby-drive-' + drive, !hidden, { expires: 3650, path:'/' })
            $(this).toggleClass("hidden");
        }

    });

    /* Update the show-standby status. */
    if ($.cookie('standby-switch') == 'false') {
        $('.show-standby').slideToggle('slow');
    }

});
</script>
