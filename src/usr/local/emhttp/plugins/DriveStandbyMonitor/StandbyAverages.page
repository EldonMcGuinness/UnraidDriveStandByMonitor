Menu="DriveStandbyMonitor:1"
Title="Standby Averages"
Tag="logo-x16.png"
Markdown="false"
---
<?
#Pull some default data
libxml_use_internal_errors(true); # Suppress any warnings from xml errors.
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$script = "DriveStandbyMonitor";
$defaults = @parse_ini_file("$docroot/plugins/DriveStandbyMonitor/default.cfg") ?: [];
$DB_LOCATION = $defaults["DB_LOCATION"];


$DB_FILE = "${DB_LOCATION}/monitor.db";
$DRIVE_STATUS = array();

$sql_standby = "SELECT 'standby'.'drive', count('standby'.'state') AS count from 'standby' where 'standby'.'state' == 0 group by 'standby'.'drive';";
$sql_live = "SELECT 'standby'.'drive', count('standby'.'state') AS count from 'standby' where 'standby'.'state' == 1 group by 'standby'.'drive';";

class DriveIDs {

    private $drives = [];

    public function __construct( $drives = [] ){
        
        if ( gettype( $drives ) == 'array' ) {
            
            $this->drives = $this->parseDrives($drives);
        }

    }

    private function parseDrives( $drives = [] ){

        $parsedDrives = [];

        foreach ( $drives as $key => $drive ){

            if ( $key == 'flash' ) continue;

            $parsedDrives[ $drive['id'] ] = [
                'name' => $this->cleanName( $drive['name'] ),
                'device' => $drive['device']
            ];

        }

        return $parsedDrives;
    }

    private function cleanName( $name ) {

        if ( strstr($name, 'disk')  !== false ){
            return rtrim( "Disk ".substr($name, 4) );

        }elseif ( strstr($name, 'cache') !== false ){
            return rtrim( "Cache ".substr($name, 5) );

        }elseif ( strstr($name, 'parity')  !== false ){
            return rtrim( "Parity ".substr($name, 6) );

        }

    }

    public function getDeviceName( $serial = '' ){
        return $this->drives[ $serial ]['name'];

    }

    public function getDevice( $serial = '' ){
        return $this->drives[ $serial ]['device'];
    }
}

$driveIDs = new DriveIDs( $disks );

# Get the DB info and data on the drives
$sqlite = new SQLite3( $DB_FILE );
$live_result = $sqlite->query( $sql_live );
$standby_result = $sqlite->query( $sql_standby );

# Sorter for DRIVE_STATUS
function alphasort($a, $b){
    if ($a['name'] == $b['name']) return 0;
    return ($a['name'] < $b['name']) ? -1 : 1;
}

while ($data = $live_result->fetchArray(SQLITE3_ASSOC)){
    $DRIVE_STATUS[ $data["drive"] ]['live'] = $data["count"];
}

while ($data = $standby_result->fetchArray(SQLITE3_ASSOC)){
    $DRIVE_STATUS[ $data["drive"] ]['standby'] = $data["count"];
}

if( count($DRIVE_STATUS) === 0 ) {
    print("No data has been collected yet\n");
    print("Please wait up to 20 minutes for an update to occur.\n");

}else{

    # Calculate AVG & Set Name
    foreach ( $DRIVE_STATUS as $key => $val){
        $live = isset( $val['live'] ) ? $val['live'] : 0;
        $standby = isset( $val['standby'] ) ? $val['standby'] : 0;
        
        $DRIVE_STATUS[$key]['name'] = $driveIDs->getDeviceName( $key );

        if ($standby < 1) {
            $DRIVE_STATUS[$key]['avg'] = 0;
        }else{
            $DRIVE_STATUS[$key]['avg'] = round( ( 100 * ( $standby / ($live + $standby) ) ), 2 );
        }
    }

    # Sort the list
    usort($DRIVE_STATUS,"alphasort");

}
?>
<style type="text/css">
.DSM-wrapper {
    width: 100%;
}

.DSM-container {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;

}

.DSM-drive {
    display: flex;
    flex-direction: column;
    min-width: 150px;
    min-height: 150px;
    justify-content: center;
    align-items: center;
}

.DSM-drive .header i{
    font-size: 64px;
}

.DSM-drive .body{
    display: flex;
    flex-direction: row;
}

.DSM-drive .body .name{
    margin-right: 10px;
}

.DSM-reset-db {
    width: 150px;
    text-align: center;
}
</style>

<div class="DSM-wrapper">
    <div class="DSM-container">
        <? foreach ( $DRIVE_STATUS as $key => $val) { ?>
            <div class="DSM-drive" title="This drive has been asleep for <? print($val['avg']); ?>% of the monitored time.">
                <div class="header">
                    <div class="image">
                        <i class="fa fa-hdd-o big white-text"></i>
                    </div>
                </div>
                <div class="body">
                    <div class="name">
                        <?=$val['name']; ?>
                    </div>
                    <div class="data">
                        <? print($val['avg']); ?>%
                    </div>
                </div>
            </div>
        <? } ?>
    </div>
    <div class="DSM-container">
        <div class="DSM-reset-db">
            <input type="button" id="DSM-reset-db" value="Reset DB" />
        </div>
    </div>
</div>
<script type="text/javascript">

async function resetDB(){
    const response = await fetch("/plugins/<?=$script?>/reset_db.php", { "reset" : 1 } );
    const json = await response.json();
    window.location.reload(true);
    // Do some error checking later
}

document.addEventListener( 'DOMContentLoaded', () => {
    document.querySelector("#DSM-reset-db").addEventListener("click", () => {
        
        const confirmation = confirm("Are you sure you want to delete all previously logged data?\nThis cannot be undone.");
        
        if ( confirmation ) {
            resetDB();
        }
        
    });
});

</script>